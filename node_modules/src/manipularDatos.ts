// Importar tipos necesarios
import { Paciente, SignoVital, ControlRealizado } from './tipos';

// Funci贸n para obtener todos los controles realizados de un paciente
function obtenerControlesDePaciente(idPaciente: number, controles: ControlRealizado[]): ControlRealizado[] {
  return controles.filter((control) => control.idPaciente === idPaciente);
}

// Funci贸n para obtener un signo vital por su ID
function obtenerSignoVitalPorId(idSignoVital: number, signosVitales: SignoVital[]): SignoVital | undefined {
  return signosVitales.find((signo) => signo.id === idSignoVital);
}

// Funci贸n para registrar un nuevo control realizado
function registrarControlRealizado(
  idPaciente: number,
  idSignoVital: number,
  fecha: string,
  hora: string,
  valor: number,
  pacientes: Paciente[],
  signosVitales: SignoVital[],
  controlesRealizados: ControlRealizado[]
): void {
  // Verificar si el paciente y el signo vital existen
  const paciente = pacientes.find((paciente) => paciente.id === idPaciente);
  const signoVital = obtenerSignoVitalPorId(idSignoVital, signosVitales);

  if (!paciente) {
    console.log(`Paciente con ID ${idPaciente} no encontrado.`);
    return;
  }

  if (!signoVital) {
    console.log(`Signo vital con ID ${idSignoVital} no encontrado.`);
    return;
  }

  // Registrar el nuevo control realizado
  const nuevoControl: ControlRealizado = {
    id: controlesRealizados.length + 1,
    idPaciente,
    idSignoVital,
    fecha,
    hora,
    valor,
  };

  controlesRealizados.push(nuevoControl);
  console.log("Control realizado registrado exitosamente.");
}

// Exportar las funciones para ser utilizadas en otros m贸dulos
export { obtenerControlesDePaciente, registrarControlRealizado };
